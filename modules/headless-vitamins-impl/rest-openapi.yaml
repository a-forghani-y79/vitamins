openapi: 3.0.1
info:
  description: "API for accessing Vitamin detail"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  title: "Headless Vitamins"
  version: V1.0
components:
  schemas:
    Vitamin:
      description: Contains all of the data for a single vitamin or mineral.
      properties:
        name:
          description: The vitamin or minerl name.
          type: string
        id:
          description: the vitamin or minerl internal ID
          type: string
        chemicalName:
          description: the chemical name of the vitamin or mineral if it has some.
          items:
            type: string
          type: array
        properties:
          description: the chemical properties of the vitamin or mineral if it has some.
          items:
            type: string
          type: array
        group:
          description: the froup of the vitamin or mineral bkongs to. i.e the B group or A group
          type: string
        description:
          description: the description of vitamin or mineral.
          type: string
        artcleId:
          description: A journal articleId if there is a web content article for the viyamin.
          type: string
        type:
          description: the type of vitamin or mineral.
          enum: [ Vitamin, Mineral, Other ]
          type: string
        attributes:
          description: health properties attributed to the vitamin or mineral.
          type: array
          items:
            type: string
        risks:
          description: Risks associated with the vitamin or mineral.
          items:
            type: string
          type: array
        symptoms:
          description: Symptoms associated with the vitamin or mineral.
          items:
            type: string
          type: array
        creator:
          $ref: "#/components/schemas/Creator"
      type: object
    Creator:
      description: Represent the user account of the content's creator/author. Properties follow the [creator](https://schema.org/creator) specification
      properties:
        additionalName:
          description: The author's additional name (e.g., middle name).
          readOnly: true
          type: string
        familyName:
          description: The author's surname.
          readOnly: true
          type: string
        givenName:
          description: the author's first name.
          type: string
          readOnly: true
        id:
          description: the author's id.
          format: int64
          readOnly: true
          type: integer
        image:
          description: a relative URL to the author's profile image.
          format: uri
          readOnly: true
          type: string
        name:
          description: the author's full name.
          type: string
          readOnly: true
        peofileURL:
          description: a relatove URL to the author's user profile.
          format: uri
          readOnly: true
          type: string
      type: object
paths:
  "/vitamins":
    get:
      operationId: getViatminsPage
      tags: [ "Vitamin" ]
      description: Retrieves the list of vitamins and minerals. Results can be paginated, searched, and sorted.
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: sort
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Vitamin"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Vitamin"
                type: array
    post:
      operationId: postViatmin
      tags: ["Vitamin"]
      description: Create a new vitamin/mineral
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vitamin"
          application/xml:
            schema:
              $ref: "#/components/schemas/Vitamin"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vitamin"
            application/xml:
              schema:
                $ref: "#/components/schemas/Vitamin"
  "/vitamin/{vitaminId}":
    get:
      operationId: getVitamin
      tags: ["Vitamin"]
      description: Retrieves the vitamin/mineral via its ID.
      parameters:
        - name: vitaminId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vitamin"
            application/xml:
              schema:
                $ref: "#/components/schemas/Vitamin"
    put:
      description: "Replace the vitamin/mineral with the information sent in the request body. Any missing fields are deleted, unless they are required."
      operationId: putVitamin
      tags: ["Vitamin"]
      parameters:
        - name: vitaminId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vitamin"
          application/xml:
            schema:
              $ref: "#/components/schemas/Vitamin"
      responses:
        200:
          description: Default Response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vitamin"
            application/xml:
              schema:
                $ref: "#/components/schemas/Vitamin"
    patch:
      operationId: patchVitamin
      tags: [ "Vitamin" ]
      description: Replaces the vitamin/mineral with the information sent in the request body. Any missing fields are deleted, unless they are required.
      parameters:
          - name: vitaminId
            in: path
            required: true
            schema:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vitamin"
          application/xml:
            schema:
              $ref: "#/components/schemas/Vitamin"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vitamin"
            application/xml:
              schema:
                $ref: "#/components/schemas/Vitamin"
    delete:
      operationId: deleteVitamin
      tags: [ "Vitamin" ]
      description: Delete the vitamin/mineral and returns a 204 if operation succeeds.
      parameters:
        - name: vitaminId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: ""
          content:
            application/json: {}
            application/xml: {}

